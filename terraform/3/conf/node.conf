#cloud-config
coreos:
  etcd2:
    discovery: ${etcd_discovery_url}
    advertise-client-urls: https://$private_ipv4:2379
    initial-advertise-peer-urls: https://$private_ipv4:2380
    listen-client-urls: https://0.0.0.0:2379
    listen-peer-urls: https://$private_ipv4:2380
    cert-file: /etc/ssl/etcd/worker.pem
    key-file: /etc/ssl/etcd/worker-key.pem
    client-cert-auth: true
    trusted-ca-file: /etc/ssl/etcd/ca.pem
    peer-cert-file: /etc/ssl/etcd/worker.pem
    peer-key-file: /etc/ssl/etcd/worker-key.pem
    peer-client-cert-auth: true
    peer-trusted-ca-file: /etc/ssl/etcd/ca.pem
  locksmith:
    endpoint: https://$private_ipv4:2379
    etcd_cafile: /etc/ssl/etcd/ca.pem
    etcd_certfile: /etc/ssl/etcd/worker.pem
    etcd_keyfile: /etc/ssl/etcd/worker-key.pem
  flannel:
    etcd_endpoints: https://$private_ipv4:2379
    etcd_cafile: /etc/ssl/etcd/ca.pem
    etcd_certfile: /etc/ssl/etcd/worker.pem
    etcd_keyfile: /etc/ssl/etcd/worker-key.pem
  update:
    reboot-strategy: "etcd-lock"
  units:
    - name: "etcd2.service"
      command: "start"
    - name: "bootstrap-node.service"
      command: start
      content: |
        [Unit]
        Before=etcd2.service
        Before=flanneld.service
        [Service]
        Type=oneshot
        ExecStart=/root/bootstrap/bootstrap-node.sh
        Restart=no
    - name: "flanneld.service"
      command: "start"
    - name: "docker.service"
      command: start
      drop-ins:
        - name: 40-Flannel.conf
          content: |
            [Unit]
            Requires=flanneld.service
            After=flanneld.service
    - name: "kubelet.service"
      command: start
      content: |
        [Unit]
        Requires=docker.service
        After=docker.service

        [Service]
        ExecStartPre=/usr/bin/mkdir -p /etc/kubernetes/manifests
        ExecStartPre=/usr/bin/mkdir -p /var/log/containers

        Environment=ETCD_ENDPOINTS=https://$private_ipv4:2379
        Environment=ETCD_CA_CERT_FILE=/etc/ssl/kubernetes/ca.pem
        Environment=ETCD_CERT_FILE=/etc/ssl/kubernetes/worker.pem
        Environment=ETCD_KEY_FILE=/etc/ssl/kubernetes/worker-key.pem
        Environment=KUBELET_VERSION=${kubernetes_version}
        Environment="RKT_OPTS=--volume var-log,kind=host,source=/var/log \
          --mount volume=var-log,target=/var/log \
          --volume dns,kind=host,source=/etc/resolv.conf \
          --mount volume=dns,target=/etc/resolv.conf \
          --volume ssl-etcd,kind=host,source=/etc/ssl/etcd \
          --mount volume=ssl-etcd,target=/etc/ssl/etcd \
          --volume ssl-kubernetes,kind=host,source=/etc/ssl/kubernetes \
          --mount volume=ssl-kubernetes,target=/etc/ssl/kubernetes"

        ExecStart=/usr/lib/coreos/kubelet-wrapper \
          --api-servers=https://${master_ip} \
          --network-plugin= \
          --register-node=true \
          --allow-privileged=true \
          --config=/etc/kubernetes/manifests \
          --hostname-override=$private_ipv4 \
          --cluster-dns=${dns_service_ip} \
          --cluster-domain=cluster.local \
          --kubeconfig=/etc/kubernetes/worker-kubeconfig.yaml \
          --tls-cert-file=/etc/ssl/kubernetes/worker.pem \
          --tls-private-key-file=/etc/ssl/kubernetes/worker-key.pem
        Restart=always
        RestartSec=10
        [Install]
        WantedBy=multi-user.target
write_files:
  - path: "/root/bootstrap/bootstrap-node.sh"
    permissions: "0755"
    owner: "root"
    content: |
      #!/usr/bin/env bash
      set -e
      set -u

      if [ -f /root/bootstrap/.done ]; then
        echo "SSL keys already initialized"
        exit 0
      fi

      until [ -f /home/core/worker.pem ]; do
        echo "Waiting for the SSL keys to appear"
        sleep 5
      done

      until [ -f /home/core/worker-key.pem ]; do
        echo "Waiting for the SSL keys to appear"
        sleep 5
      done

      until [ -f /home/core/ca.pem ]; do
        echo "Waiting for the SSL keys to appear"
        sleep 5
      done

      chmod 600 /home/core/worker.pem
      chmod 600 /home/core/worker-key.pem
      chmod 600 /home/core/ca.pem

      mkdir -p /etc/ssl/kubernetes
      cp /home/core/worker.pem /etc/ssl/kubernetes/worker.pem
      cp /home/core/worker-key.pem /etc/ssl/kubernetes/worker-key.pem
      cp /home/core/ca.pem /etc/ssl/kubernetes/ca.pem
      chown -R root:root /etc/ssl/kubernetes

      mkdir -p /etc/ssl/etcd
      cp /home/core/worker.pem /etc/ssl/etcd/worker.pem
      cp /home/core/worker-key.pem /etc/ssl/etcd/worker-key.pem
      cp /home/core/ca.pem /etc/ssl/etcd/ca.pem
      chown -R etcd:etcd /etc/ssl/etcd

      rm /home/core/worker.pem
      rm /home/core/worker-key.pem
      rm /home/core/ca.pem

      touch /root/bootstrap/.done

  - path: "/etc/kubernetes/manifests/kube-proxy.yaml"
    permissions: "0644"
    owner: "root"
    content: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: kube-proxy
        namespace: kube-system
      spec:
        hostNetwork: true
        containers:
        - name: kube-proxy
          image: quay.io/coreos/hyperkube:${kubernetes_version}
          command:
          - /hyperkube
          - proxy
          - --master=https://${master_ip}
          - --kubeconfig=/etc/kubernetes/worker-kubeconfig.yaml
          - --proxy-mode=iptables
          securityContext:
            privileged: true
          volumeMounts:
            - mountPath: /etc/ssl/certs
              name: "ssl-certs"
            - mountPath: /etc/kubernetes/worker-kubeconfig.yaml
              name: "kubeconfig"
              readOnly: true
            - mountPath: /etc/ssl/kubernetes
              name: "etc-kube-ssl"
              readOnly: true
        volumes:
          - name: "ssl-certs"
            hostPath:
              path: "/usr/share/ca-certificates"
          - name: "kubeconfig"
            hostPath:
              path: "/etc/kubernetes/worker-kubeconfig.yaml"
          - name: "etc-kube-ssl"
            hostPath:
              path: "/etc/ssl/kubernetes"

  - path: "/etc/kubernetes/worker-kubeconfig.yaml"
    permissions: "0644"
    owner: "root"
    content: |
      apiVersion: v1
      kind: Config
      clusters:
      - name: local
        cluster:
          certificate-authority: /etc/ssl/kubernetes/ca.pem
      users:
      - name: kubelet
        user:
          client-certificate: /etc/ssl/kubernetes/worker.pem
          client-key: /etc/ssl/kubernetes/worker-key.pem
      contexts:
      - context:
          cluster: local
          user: kubelet
        name: kubelet-context
      current-context: kubelet-context
